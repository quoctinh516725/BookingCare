# KẾ HOẠCH PHÁT TRIỂN HỆ THỐNG QUẢN LÝ ĐẶT DỊCH VỤ CHĂM SÓC DA

## 1. PHÂN TÍCH YÊU CẦU

### 1.1 Chức năng hệ thống:
- Trang chủ giới thiệu thông tin trung tâm, dịch vụ, chuyên viên, blog
- Trắc nghiệm đề xuất dịch vụ chăm sóc da phù hợp
- Đặt dịch vụ chăm sóc da (có thể chỉ định chuyên viên)
- Quản lý quy trình đặt dịch vụ (checkin, phân công, thực hiện, ghi nhận kết quả, checkout)
- Quản lý thanh toán và hủy đơn
- Khai báo thông tin dịch vụ, lịch làm việc, bảng giá
- Quản lý thông tin chuyên viên trị liệu da
- Quản lý rating, feedback
- Quản lý hồ sơ khách hàng và lịch sử đặt dịch vụ
- Dashboard & Report

### 1.2 Phân quyền người dùng:
- Khách hàng: đặt dịch vụ, trắc nghiệm, đánh giá, quản lý thông tin cá nhân
- Nhân viên: checkin/checkout khách hàng, quản lý đơn dịch vụ
- Chuyên viên: thực hiện dịch vụ, ghi nhận kết quả
- Quản trị viên: quản lý hệ thống, báo cáo, khai báo thông tin

## 2. KIẾN TRÚC HỆ THỐNG

### 2.1 Công nghệ sử dụng:
- Backend: Spring Boot, Spring Security, Spring Data JPA
- Database: PostgreSQL/MySQL
- Frontend: React/Angular + Bootstrap/Material UI
- Authentication: JWT
- Documentation: Swagger/OpenAPI
- Testing: JUnit, Mockito
- Build tool: Maven/Gradle
- CI/CD: GitHub Actions/Jenkins

### 2.2 Kiến trúc dự án:
- Áp dụng Clean Architecture
- RESTful API
- Microservices (nếu cần mở rộng)
- Dependency Injection
- CQRS pattern (nếu cần)

## 3. MÔ HÌNH DỮ LIỆU

### 3.1 Các entity chính:
1. **User**: Người dùng hệ thống (Khách hàng, Nhân viên, Chuyên viên, Admin)
2. **Role**: Phân quyền người dùng
3. **Customer**: Thông tin chi tiết khách hàng
4. **Specialist**: Thông tin chi tiết chuyên viên
5. **Service**: Dịch vụ chăm sóc da
6. **ServiceCategory**: Danh mục dịch vụ
7. **Booking**: Đơn đặt dịch vụ
8. **BookingDetail**: Chi tiết đơn đặt dịch vụ
9. **BookingStatus**: Trạng thái đơn đặt dịch vụ
10. **Treatment**: Quá trình thực hiện dịch vụ
11. **TreatmentResult**: Kết quả trị liệu
12. **Payment**: Thanh toán
13. **Rating**: Đánh giá
14. **Feedback**: Phản hồi
15. **SkinTest**: Bài trắc nghiệm da
16. **SkinTestResult**: Kết quả trắc nghiệm
17. **SkinType**: Loại da
18. **WorkSchedule**: Lịch làm việc
19. **Blog**: Bài viết blog
20. **BlogCategory**: Danh mục blog
21. **Notification**: Thông báo

## 4. KẾ HOẠCH TRIỂN KHAI API

### 4.1 API Authentication & Authorization
- POST /api/v1/auth/register: Đăng ký tài khoản
- POST /api/v1/auth/login: Đăng nhập
- POST /api/v1/auth/logout: Đăng xuất
- POST /api/v1/auth/refresh-token: Làm mới token
- GET /api/v1/auth/introspect: Kiểm tra token

### 4.2 API User Management
- GET /api/v1/users: Lấy danh sách người dùng
- GET /api/v1/users/{id}: Lấy thông tin người dùng
- POST /api/v1/users: Tạo người dùng mới
- PUT /api/v1/users/{id}: Cập nhật thông tin người dùng
- DELETE /api/v1/users/{id}: Xóa người dùng

### 4.3 API Customer Management
- GET /api/v1/customers: Lấy danh sách khách hàng
- GET /api/v1/customers/{id}: Lấy thông tin khách hàng
- POST /api/v1/customers: Tạo khách hàng mới
- PUT /api/v1/customers/{id}: Cập nhật thông tin khách hàng
- GET /api/v1/customers/{id}/bookings: Lấy lịch sử đặt dịch vụ
- GET /api/v1/customers/{id}/skin-test-results: Lấy lịch sử kết quả trắc nghiệm

### 4.4 API Specialist Management
- GET /api/v1/specialists: Lấy danh sách chuyên viên
- GET /api/v1/specialists/{id}: Lấy thông tin chuyên viên
- POST /api/v1/specialists: Tạo chuyên viên mới
- PUT /api/v1/specialists/{id}: Cập nhật thông tin chuyên viên
- GET /api/v1/specialists/{id}/schedule: Lấy lịch làm việc chuyên viên
- PUT /api/v1/specialists/{id}/schedule: Cập nhật lịch làm việc

### 4.5 API Service Management
- GET /api/v1/services: Lấy danh sách dịch vụ
- GET /api/v1/services/{id}: Lấy thông tin dịch vụ
- POST /api/v1/services: Tạo dịch vụ mới
- PUT /api/v1/services/{id}: Cập nhật thông tin dịch vụ
- DELETE /api/v1/services/{id}: Xóa dịch vụ
- GET /api/v1/service-categories: Lấy danh mục dịch vụ

### 4.6 API Booking Management
- GET /api/v1/bookings: Lấy danh sách đơn đặt dịch vụ
- GET /api/v1/bookings/{id}: Lấy thông tin đơn đặt dịch vụ
- POST /api/v1/bookings: Tạo đơn đặt dịch vụ mới
- PUT /api/v1/bookings/{id}: Cập nhật đơn đặt dịch vụ
- DELETE /api/v1/bookings/{id}: Hủy đơn đặt dịch vụ
- PUT /api/v1/bookings/{id}/status: Cập nhật trạng thái đơn
- PUT /api/v1/bookings/{id}/checkin: Checkin khách hàng
- PUT /api/v1/bookings/{id}/assign: Phân công chuyên viên
- PUT /api/v1/bookings/{id}/checkout: Checkout khách hàng

### 4.7 API Treatment Management
- GET /api/v1/treatments: Lấy danh sách điều trị
- GET /api/v1/treatments/{id}: Lấy thông tin điều trị
- POST /api/v1/treatments: Tạo điều trị mới
- PUT /api/v1/treatments/{id}: Cập nhật thông tin điều trị
- POST /api/v1/treatments/{id}/results: Ghi nhận kết quả điều trị

### 4.8 API Payment Management
- GET /api/v1/payments: Lấy danh sách thanh toán
- GET /api/v1/payments/{id}: Lấy thông tin thanh toán
- POST /api/v1/payments: Tạo thanh toán mới
- PUT /api/v1/payments/{id}: Cập nhật thông tin thanh toán
- GET /api/v1/payment-methods: Lấy phương thức thanh toán

### 4.9 API Rating & Feedback
- GET /api/v1/ratings: Lấy danh sách đánh giá
- POST /api/v1/ratings: Tạo đánh giá mới
- GET /api/v1/feedbacks: Lấy danh sách phản hồi
- POST /api/v1/feedbacks: Tạo phản hồi mới

### 4.10 API Skin Test
- GET /api/v1/skin-tests: Lấy danh sách trắc nghiệm
- GET /api/v1/skin-tests/{id}: Lấy thông tin trắc nghiệm
- POST /api/v1/skin-tests/results: Lưu kết quả trắc nghiệm
- GET /api/v1/skin-tests/recommendations: Lấy đề xuất dịch vụ

### 4.11 API Blog Management
- GET /api/v1/blogs: Lấy danh sách bài viết
- GET /api/v1/blogs/{id}: Lấy chi tiết bài viết
- POST /api/v1/blogs: Tạo bài viết mới
- PUT /api/v1/blogs/{id}: Cập nhật bài viết
- DELETE /api/v1/blogs/{id}: Xóa bài viết
- GET /api/v1/blog-categories: Lấy danh mục bài viết

### 4.12 API Dashboard & Reports
- GET /api/v1/dashboard/statistics: Lấy thống kê tổng quan
- GET /api/v1/dashboard/revenue: Lấy báo cáo doanh thu
- GET /api/v1/dashboard/bookings: Lấy báo cáo đặt dịch vụ
- GET /api/v1/dashboard/customers: Lấy báo cáo khách hàng

## 5. THIẾT KẾ CHI TIẾT ENTITY

### 5.1 User Entity
```java
@Entity
@Table(name = "users")
@Inheritance(strategy = InheritanceType.JOINED)
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;
    private String username;
    private String password;
    private String email;
    private String phone;
    private String firstName;
    private String lastName;
    private LocalDate dob;
    private String avatar;
    private boolean active;
    
    @Enumerated(EnumType.STRING)
    private UserRole role;
    
    @OneToMany(mappedBy = "user")
    private List<Notification> notifications;
    
    @CreatedDate
    private LocalDateTime createdAt;
    
    @LastModifiedDate
    private LocalDateTime updatedAt;
}
```

### 5.2 Customer Entity
```java
@Entity
@Table(name = "customers")
public class Customer extends User {
    private String address;
    
    @Enumerated(EnumType.STRING)
    private SkinType skinType;
    
    @OneToMany(mappedBy = "customer")
    private List<Booking> bookings;
    
    @OneToMany(mappedBy = "customer")
    private List<SkinTestResult> skinTestResults;
    
    @OneToMany(mappedBy = "customer")
    private List<Rating> ratings;
}
```

### 5.3 Specialist Entity
```java
@Entity
@Table(name = "specialists")
public class Specialist extends User {
    private String bio;
    private String expertise;
    private int yearsOfExperience;
    private String certifications;
    
    @OneToMany(mappedBy = "specialist")
    private List<WorkSchedule> workSchedules;
    
    @OneToMany(mappedBy = "specialist")
    private List<Treatment> treatments;
    
    @ManyToMany
    @JoinTable(
        name = "specialist_services",
        joinColumns = @JoinColumn(name = "specialist_id"),
        inverseJoinColumns = @JoinColumn(name = "service_id")
    )
    private Set<Service> services;
}
```

### 5.4 Service Entity
```java
@Entity
@Table(name = "services")
public class Service {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;
    private String name;
    private String description;
    private double price;
    private int durationMinutes;
    private String imageUrl;
    
    @ManyToOne
    @JoinColumn(name = "category_id")
    private ServiceCategory category;
    
    @ManyToMany(mappedBy = "services")
    private Set<Specialist> specialists;
    
    @OneToMany(mappedBy = "service")
    private List<BookingDetail> bookingDetails;
    
    @CreatedDate
    private LocalDateTime createdAt;
    
    @LastModifiedDate
    private LocalDateTime updatedAt;
}
```

### 5.5 Booking Entity
```java
@Entity
@Table(name = "bookings")
public class Booking {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;
    
    @ManyToOne
    @JoinColumn(name = "customer_id")
    private Customer customer;
    
    private LocalDateTime bookingTime;
    private String note;
    
    @Enumerated(EnumType.STRING)
    private BookingStatus status;
    
    @OneToMany(mappedBy = "booking", cascade = CascadeType.ALL)
    private List<BookingDetail> bookingDetails;
    
    @OneToOne(mappedBy = "booking", cascade = CascadeType.ALL)
    private Payment payment;
    
    @OneToMany(mappedBy = "booking")
    private List<Treatment> treatments;
    
    private LocalDateTime checkinTime;
    private LocalDateTime checkoutTime;
    
    @CreatedDate
    private LocalDateTime createdAt;
    
    @LastModifiedDate
    private LocalDateTime updatedAt;
}
```

## 6. LỘ TRÌNH PHÁT TRIỂN

### 6.1 Giai đoạn 1: Cấu trúc cơ bản
- Thiết lập project structure
- Cấu hình database
- Cấu hình security
- Xây dựng các entity cơ bản
- Xây dựng API authentication

### 6.2 Giai đoạn 2: Quản lý người dùng
- API quản lý người dùng
- API quản lý khách hàng
- API quản lý chuyên viên
- Quản lý phân quyền

### 6.3 Giai đoạn 3: Quản lý dịch vụ
- API quản lý dịch vụ
- API quản lý danh mục dịch vụ
- API quản lý bảng giá
- API trắc nghiệm da

### 6.4 Giai đoạn 4: Quản lý đặt dịch vụ
- API đặt dịch vụ
- API quản lý trạng thái đơn
- API checkin/checkout
- API phân công chuyên viên
- API ghi nhận kết quả

### 6.5 Giai đoạn 5: Thanh toán và đánh giá
- API quản lý thanh toán
- API đánh giá và phản hồi
- API hủy đơn

### 6.6 Giai đoạn 6: Báo cáo và tối ưu
- API dashboard & reports
- Caching
- Logging
- Monitoring
- Performance tuning

## 7. TESTING STRATEGY

### 7.1 Unit Testing
- Test các service, repository
- Sử dụng JUnit, Mockito

### 7.2 Integration Testing
- Test API endpoints
- Test database interactions

### 7.3 End-to-End Testing
- Test workflow hoàn chỉnh
- Test user journeys

### 7.4 Performance Testing
- Load testing
- Stress testing

## 8. DEPLOYMENT STRATEGY

### 8.1 Development Environment
- Local development
- CI/CD pipeline

### 8.2 Staging Environment
- Testing environment
- QA testing

### 8.3 Production Environment
- Monitoring
- Backup strategy
- Scaling strategy

## 9. MAINTENANCE & SUPPORT

### 9.1 Logging & Monitoring
- Logging strategy
- Monitoring tools
- Alert system

### 9.2 Backup & Recovery
- Database backup
- Disaster recovery plan

### 9.3 Documentation
- API documentation
- System documentation
- User guides 