# KIỂM TRA BẢO MẬT CÁC CONTROLLER

## PHÂN TÍCH HIỆN TRẠNG

Sau khi rà soát hệ thống, phát hiện hầu hết các controller trong ứng dụng đều không có các annotation bảo mật để giới hạn quyền truy cập. Hiện tại, chỉ có hai controller có annotation bảo mật:

1. **BlogCategoryController**:
   ```java
   @PreAuthorize("hasRole('ADMIN')")
   ```

2. **BlogController**:
   ```java
   @PreAuthorize("hasRole('ADMIN') or hasRole('CONTENT_CREATOR')")
   ```

Trong khi đó, cấu hình bảo mật hiện tại trong `SecurityConfig` đang ở chế độ phát triển, cho phép truy cập tất cả API:
```java
.requestMatchers("/api/**").permitAll()
```

## VẤN ĐỀ BẢO MẬT

Việc không kiểm soát quyền truy cập API dẫn đến các vấn đề bảo mật nghiêm trọng:

1. **Lộ thông tin nhạy cảm**: Người dùng không xác thực có thể truy cập dữ liệu cá nhân của người dùng khác
2. **Thay đổi dữ liệu trái phép**: API PUT/DELETE/POST không giới hạn quyền, cho phép bất kỳ ai cũng có thể thực hiện các thao tác quản trị
3. **Business logic bypass**: Có thể bỏ qua các quy tắc nghiệp vụ của ứng dụng

## GIẢI PHÁP

### 1. Cập nhật cấu hình SecurityConfig

```java
@Bean
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    http
        .csrf(AbstractHttpConfigurer::disable)
        .cors(cors -> cors.configurationSource(corsConfigurationSource()))
        .authorizeHttpRequests(authorize -> authorize
            // Swagger UI endpoints
            .requestMatchers("/swagger-ui/**", "/api-docs/**").permitAll()
            // Public endpoints
            .requestMatchers("/api/v1/users/auth/**").permitAll()
            .requestMatchers(HttpMethod.GET, "/api/v1/services/**").permitAll()
            .requestMatchers(HttpMethod.GET, "/api/v1/blogs/**").permitAll()
            .requestMatchers(HttpMethod.GET, "/api/v1/service-categories/**").permitAll()
            .requestMatchers(HttpMethod.GET, "/api/v1/blog-categories/**").permitAll()
            // Any other request requires authentication
            .anyRequest().authenticated())
        .sessionManagement(session -> session
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS))
        .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()));

    return http.build();
}
```

### 2. Cập nhật controller với các annotation bảo mật phù hợp

## PHÂN QUYỀN THEO CONTROLLER

### 1. UserManagementController

```java
// Các endpoint đăng nhập và xác thực - Truy cập công khai
@PostMapping("/auth/login")
@PostMapping("/auth/validate")

// Các endpoint quản lý người dùng - Chỉ ADMIN
@PreAuthorize("hasRole('ADMIN')")
@PostMapping
@GetMapping
@PutMapping("/{userId}")
@DeleteMapping("/{userId}")

// Endpoint xem thông tin người dùng - Chỉ user đó hoặc ADMIN
@PreAuthorize("hasRole('ADMIN') or @securityService.isCurrentUser(#userId)")
@GetMapping("/{userId}")

// Endpoint quản lý khách hàng - Chỉ ADMIN hoặc user đó
@PreAuthorize("hasRole('ADMIN') or @securityService.isCurrentUser(authentication, #customerId)")
@GetMapping("/customers/{customerId}")
@PutMapping("/customers/{customerId}")
@GetMapping("/customers/{customerId}/bookings")
@GetMapping("/customers/{customerId}/skin-test-results")
```

### 2. ServiceController

```java
// Tạo, cập nhật, xóa - Chỉ ADMIN
@PreAuthorize("hasRole('ADMIN')")
@PostMapping
@PutMapping("/{id}")
@DeleteMapping("/{id}")

// Các endpoint xem dịch vụ - Công khai
// Không cần annotation, đã cấu hình permitAll trong SecurityConfig
@GetMapping("/{id}")
@GetMapping("/name/{name}")
@GetMapping
@GetMapping("/category/{categoryId}")
@GetMapping("/search")
```

### 3. BookingController

```java
// Tạo booking - Người dùng đã đăng nhập
@PreAuthorize("isAuthenticated()")
@PostMapping

// Xem tất cả booking - Chỉ ADMIN
@PreAuthorize("hasRole('ADMIN')")
@GetMapping

// Các thao tác quản lý booking - ADMIN hoặc Specialist được gán
@PreAuthorize("hasRole('ADMIN') or hasRole('SPECIALIST') and @bookingSecurityService.isAssignedSpecialist(#id)")
@PutMapping("/{id}/status")
@PutMapping("/{id}/checkin")
@PutMapping("/{id}/checkout")

// Gán specialist - Chỉ ADMIN
@PreAuthorize("hasRole('ADMIN')")
@PutMapping("/{id}/assign")

// Xem, cập nhật, hủy booking - ADMIN, chủ booking hoặc specialist được gán
@PreAuthorize("hasRole('ADMIN') or @bookingSecurityService.isOwnerOrAssignedSpecialist(#id)")
@GetMapping("/{id}")
@PutMapping("/{id}")
@DeleteMapping("/{id}")
```

### 4. SkinTestController

```java
// Tạo, quản lý test - Chỉ ADMIN và SPECIALIST
@PreAuthorize("hasRole('ADMIN') or hasRole('SPECIALIST')")
@PostMapping
@GetMapping

// Xem kết quả test cụ thể - ADMIN, SPECIALIST, hoặc chủ kết quả
@PreAuthorize("hasRole('ADMIN') or hasRole('SPECIALIST') or @skinTestSecurityService.isTestResultOwner(#id)")
@GetMapping("/results/{id}")

// Lưu kết quả test - User đã xác thực
@PreAuthorize("isAuthenticated()")
@PostMapping("/results")

// Xem kết quả test của khách hàng - ADMIN, SPECIALIST, hoặc chính khách hàng đó
@PreAuthorize("hasRole('ADMIN') or hasRole('SPECIALIST') or @securityService.isCurrentUser(authentication, #customerId)")
@GetMapping("/results/customer/{customerId}")

// Xem khuyến nghị dịch vụ - ADMIN, SPECIALIST, hoặc chủ kết quả
@PreAuthorize("hasRole('ADMIN') or hasRole('SPECIALIST') or @skinTestSecurityService.isTestResultOwner(#resultId)")
@GetMapping("/recommendations")
```

## TRIỂN KHAI SECURITY SERVICE

Để kiểm tra logic phức tạp như "người dùng hiện tại có phải là chủ tài nguyên", cần tạo service hỗ trợ:

```java
@Service
public class SecurityService {
    
    private final UserRepository userRepository;
    
    @Autowired
    public SecurityService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }
    
    public boolean isCurrentUser(String userId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        return isCurrentUser(authentication, userId);
    }
    
    public boolean isCurrentUser(Authentication authentication, String userId) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return false;
        }
        
        String currentUsername = authentication.getName();
        User user = userRepository.findById(userId).orElse(null);
        
        return user != null && user.getUsername().equals(currentUsername);
    }
}
```

## KẾT LUẬN

Sau khi áp dụng các thay đổi trên, hệ thống sẽ được bảo mật tốt hơn với nguyên tắc:

1. **Least Privilege**: Người dùng chỉ có quyền truy cập các tài nguyên cần thiết
2. **Defense in Depth**: Bảo mật ở nhiều lớp (cấu hình chung và annotation trên từng phương thức)
3. **Need-to-know basis**: Thông tin chỉ được cung cấp cho người có quyền truy cập

Các endpoint công khai sẽ được giới hạn chủ yếu ở các thao tác GET để xem thông tin sản phẩm/dịch vụ, trong khi các thao tác thay đổi dữ liệu yêu cầu xác thực và phân quyền phù hợp. 