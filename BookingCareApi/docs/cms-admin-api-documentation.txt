# BEAUTIFUL CARE CMS ADMIN - API DOCUMENTATION

## TỔNG QUAN

Tài liệu này hướng dẫn cách sử dụng các API endpoints cho hệ thống CMS Admin của Beautiful Care. Tài liệu được thiết kế để giúp bạn (Frontend Developer) hiểu và tích hợp các API một cách hiệu quả vào ứng dụng Admin.

### Base URL

```
https://api.beautifulcare.com/api/v1
```

### Authentication

Tất cả các API (trừ login) đều yêu cầu JWT token trong header:

```
Authorization: Bearer {token}
```

---

## PHÂN QUYỀN VÀ XÁC THỰC

### 1. Đăng nhập

Endpoint: `POST /users/auth/login`
Mô tả: Đăng nhập và lấy JWT token.

Request:
```json
{
  "email": "admin@example.com",
  "password": "password123"
}
```

Response:
```json
{
  "status": "success",
  "message": "Authentication successful",
  "data": {
    "accessToken": "eyJhbGc...",
    "refreshToken": "eyJhbGc...",
    "tokenType": "Bearer",
    "expiresIn": 3600,
    "user": {
      "id": "user-id",
      "email": "admin@example.com",
      "role": "ADMIN",
      "firstName": "Admin",
      "lastName": "User"
    }
  }
}
```

### 2. Validate Token

Endpoint: `POST /users/auth/validate`
Mô tả: Kiểm tra tính hợp lệ của token.

Request:
```json
{
  "token": "eyJhbGc..."
}
```

Response:
```json
{
  "status": "success",
  "message": "Token validation successful",
  "data": {
    "active": true,
    "exp": 1716367712,
    "userId": "user-id",
    "roles": ["ADMIN"]
  }
}
```

---

## QUẢN LÝ NGƯỜI DÙNG

### 1. Danh sách người dùng

Endpoint: `GET /users`
Mô tả: Lấy danh sách tất cả người dùng.

Response:
```json
{
  "status": "success",
  "message": "Users retrieved successfully",
  "data": [
    {
      "id": "user-id-1",
      "email": "user1@example.com",
      "firstName": "User",
      "lastName": "One",
      "role": "ADMIN",
      "createdAt": "2024-03-15T10:30:00Z"
    },
    {
      "id": "user-id-2",
      "email": "user2@example.com",
      "firstName": "User",
      "lastName": "Two",
      "role": "USER",
      "createdAt": "2024-03-16T14:20:00Z"
    }
  ]
}
```

### 2. Chi tiết người dùng

Endpoint: `GET /users/{userId}`
Mô tả: Lấy thông tin chi tiết của một người dùng.

Response:
```json
{
  "status": "success",
  "message": "User retrieved successfully",
  "data": {
    "id": "user-id-1",
    "email": "user1@example.com",
    "firstName": "User",
    "lastName": "One",
    "role": "ADMIN",
    "createdAt": "2024-03-15T10:30:00Z",
    "updatedAt": "2024-03-18T09:45:00Z"
  }
}
```

### 3. Tạo người dùng mới

Endpoint: `POST /users`
Mô tả: Tạo người dùng mới.

Request:
```json
{
  "email": "newuser@example.com",
  "password": "securePassword123",
  "firstName": "New",
  "lastName": "User",
  "role": "CONTENT_CREATOR"
}
```

Response:
```json
{
  "status": "success",
  "message": "User created successfully",
  "data": {
    "id": "new-user-id",
    "email": "newuser@example.com",
    "firstName": "New",
    "lastName": "User",
    "role": "CONTENT_CREATOR",
    "createdAt": "2024-03-21T11:20:00Z"
  }
}
```

### 4. Cập nhật người dùng

Endpoint: `PUT /users/{userId}`
Mô tả: Cập nhật thông tin người dùng.

Request:
```json
{
  "firstName": "Updated",
  "lastName": "User",
  "role": "ADMIN"
}
```

Response:
```json
{
  "status": "success",
  "message": "User updated successfully",
  "data": {
    "id": "user-id-1",
    "email": "user1@example.com",
    "firstName": "Updated",
    "lastName": "User",
    "role": "ADMIN",
    "updatedAt": "2024-03-21T14:35:00Z"
  }
}
```

### 5. Xóa người dùng

Endpoint: `DELETE /users/{userId}`
Mô tả: Xóa người dùng.

Response:
```json
{
  "status": "success",
  "message": "User deleted successfully",
  "data": null
}
```

---

## QUẢN LÝ BLOG

### 1. Danh sách bài viết

Endpoint: `GET /blogs`
Mô tả: Lấy danh sách tất cả bài viết.

Response:
```json
[
  {
    "id": "blog-id-1",
    "title": "Skin Care Tips",
    "content": "Content here...",
    "slug": "skin-care-tips",
    "imageUrl": "https://example.com/images/skin-care.jpg",
    "published": true,
    "category": {
      "id": "category-id-1",
      "name": "Skin Care"
    },
    "author": {
      "id": "author-id-1",
      "name": "John Doe"
    },
    "createdAt": "2024-03-10T08:15:00Z",
    "updatedAt": "2024-03-10T10:20:00Z",
    "publishedAt": "2024-03-10T11:00:00Z"
  },
  {
    "id": "blog-id-2",
    "title": "Hair Treatment Guide",
    "content": "Content here...",
    "slug": "hair-treatment-guide",
    "imageUrl": "https://example.com/images/hair-treatment.jpg",
    "published": false,
    "category": {
      "id": "category-id-2",
      "name": "Hair Care"
    },
    "author": {
      "id": "author-id-1",
      "name": "John Doe"
    },
    "createdAt": "2024-03-15T09:30:00Z",
    "updatedAt": "2024-03-15T14:25:00Z",
    "publishedAt": null
  }
]
```

### 2. Chi tiết bài viết

Endpoint: `GET /blogs/{id}`
Mô tả: Lấy thông tin chi tiết một bài viết.

Response:
```json
{
  "id": "blog-id-1",
  "title": "Skin Care Tips",
  "content": "Full content here...",
  "slug": "skin-care-tips",
  "imageUrl": "https://example.com/images/skin-care.jpg",
  "published": true,
  "category": {
    "id": "category-id-1",
    "name": "Skin Care"
  },
  "author": {
    "id": "author-id-1",
    "name": "John Doe"
  },
  "createdAt": "2024-03-10T08:15:00Z",
  "updatedAt": "2024-03-10T10:20:00Z",
  "publishedAt": "2024-03-10T11:00:00Z"
}
```

### 3. Tạo bài viết mới

Endpoint: `POST /blogs?authorId={authorId}`
Mô tả: Tạo bài viết mới.

Request:
```json
{
  "title": "New Beauty Tips",
  "content": "Content of the blog post...",
  "categoryId": "category-id-1",
  "imageUrl": "https://example.com/images/beauty-tips.jpg",
  "slug": "new-beauty-tips"
}
```

Response:
```json
{
  "id": "new-blog-id",
  "title": "New Beauty Tips",
  "content": "Content of the blog post...",
  "slug": "new-beauty-tips",
  "imageUrl": "https://example.com/images/beauty-tips.jpg",
  "published": false,
  "category": {
    "id": "category-id-1",
    "name": "Skin Care"
  },
  "author": {
    "id": "author-id-1",
    "name": "John Doe"
  },
  "createdAt": "2024-03-21T15:40:00Z",
  "updatedAt": "2024-03-21T15:40:00Z",
  "publishedAt": null
}
```

### 4. Cập nhật bài viết

Endpoint: `PUT /blogs/{id}`
Mô tả: Cập nhật bài viết.

Request:
```json
{
  "title": "Updated Beauty Tips",
  "content": "Updated content...",
  "categoryId": "category-id-1",
  "imageUrl": "https://example.com/images/updated-beauty-tips.jpg",
  "slug": "updated-beauty-tips"
}
```

Response:
```json
{
  "id": "blog-id-1",
  "title": "Updated Beauty Tips",
  "content": "Updated content...",
  "slug": "updated-beauty-tips",
  "imageUrl": "https://example.com/images/updated-beauty-tips.jpg",
  "published": false,
  "category": {
    "id": "category-id-1",
    "name": "Skin Care"
  },
  "author": {
    "id": "author-id-1",
    "name": "John Doe"
  },
  "createdAt": "2024-03-10T08:15:00Z",
  "updatedAt": "2024-03-21T16:10:00Z",
  "publishedAt": null
}
```

### 5. Xuất bản bài viết

Endpoint: `PATCH /blogs/{id}/publish`
Mô tả: Xuất bản bài viết.

Response:
```json
{
  "id": "blog-id-1",
  "title": "Updated Beauty Tips",
  "content": "Updated content...",
  "slug": "updated-beauty-tips",
  "imageUrl": "https://example.com/images/updated-beauty-tips.jpg",
  "published": true,
  "category": {
    "id": "category-id-1",
    "name": "Skin Care"
  },
  "author": {
    "id": "author-id-1",
    "name": "John Doe"
  },
  "createdAt": "2024-03-10T08:15:00Z",
  "updatedAt": "2024-03-21T16:25:00Z",
  "publishedAt": "2024-03-21T16:25:00Z"
}
```

### 6. Xóa bài viết

Endpoint: `DELETE /blogs/{id}`
Mô tả: Xóa bài viết.

Response: 204 No Content

---

## QUẢN LÝ DANH MỤC BLOG

### 1. Danh sách danh mục

Endpoint: `GET /blog-categories`
Mô tả: Lấy danh sách tất cả danh mục blog.

Response:
```json
[
  {
    "id": "category-id-1",
    "name": "Skin Care",
    "description": "Tips and tricks for skin care",
    "createdAt": "2024-02-15T10:00:00Z",
    "updatedAt": "2024-02-15T10:00:00Z"
  },
  {
    "id": "category-id-2",
    "name": "Hair Care",
    "description": "Everything about hair care",
    "createdAt": "2024-02-16T14:30:00Z",
    "updatedAt": "2024-02-16T14:30:00Z"
  }
]
```

### 2. Chi tiết danh mục

Endpoint: `GET /blog-categories/{id}`
Mô tả: Lấy thông tin chi tiết danh mục.

Response:
```json
{
  "id": "category-id-1",
  "name": "Skin Care",
  "description": "Tips and tricks for skin care",
  "createdAt": "2024-02-15T10:00:00Z",
  "updatedAt": "2024-02-15T10:00:00Z"
}
```

### 3. Tạo danh mục mới

Endpoint: `POST /blog-categories`
Mô tả: Tạo danh mục blog mới.

Request:
```
name=New Category&description=Description for new category
```

Response:
```json
{
  "id": "new-category-id",
  "name": "New Category",
  "description": "Description for new category",
  "createdAt": "2024-03-21T17:05:00Z",
  "updatedAt": "2024-03-21T17:05:00Z"
}
```

### 4. Cập nhật danh mục

Endpoint: `PUT /blog-categories/{id}`
Mô tả: Cập nhật danh mục blog.

Request:
```
name=Updated Category&description=Updated description
```

Response:
```json
{
  "id": "category-id-1",
  "name": "Updated Category",
  "description": "Updated description",
  "createdAt": "2024-02-15T10:00:00Z",
  "updatedAt": "2024-03-21T17:20:00Z"
}
```

### 5. Xóa danh mục

Endpoint: `DELETE /blog-categories/{id}`
Mô tả: Xóa danh mục blog.

Response: 204 No Content

### 6. Xóa danh mục và chuyển bài viết

Endpoint: `DELETE /blog-categories/{id}/reassign?targetCategoryId={targetCategoryId}`
Mô tả: Xóa danh mục và chuyển tất cả bài viết sang danh mục khác.

Response: 204 No Content

---

## QUẢN LÝ DỊCH VỤ

### 1. Danh sách dịch vụ

Endpoint: `GET /services`
Mô tả: Lấy danh sách tất cả dịch vụ (phân trang).

Query parameters:
- page: Số trang (mặc định: 0)
- size: Số phần tử mỗi trang (mặc định: 10)
- sort: Sắp xếp (ví dụ: name,asc)

Response:
```json
{
  "status": "success",
  "message": "Services retrieved successfully",
  "data": {
    "content": [
      {
        "id": "service-id-1",
        "name": "Facial Treatment",
        "description": "Rejuvenating facial treatment",
        "price": 99.99,
        "duration": 60,
        "category": {
          "id": "category-id-1",
          "name": "Facial"
        },
        "imageUrl": "https://example.com/images/facial.jpg",
        "suitableForSkinType": "ALL"
      },
      {
        "id": "service-id-2",
        "name": "Hair Coloring",
        "description": "Professional hair coloring",
        "price": 149.99,
        "duration": 120,
        "category": {
          "id": "category-id-2",
          "name": "Hair"
        },
        "imageUrl": "https://example.com/images/hair-coloring.jpg",
        "suitableForSkinType": null
      }
    ],
    "pageable": {
      "pageNumber": 0,
      "pageSize": 10,
      "sort": {
        "sorted": true,
        "unsorted": false,
        "empty": false
      },
      "offset": 0,
      "paged": true,
      "unpaged": false
    },
    "totalElements": 2,
    "totalPages": 1,
    "last": true,
    "size": 10,
    "number": 0,
    "sort": {
      "sorted": true,
      "unsorted": false,
      "empty": false
    },
    "numberOfElements": 2,
    "first": true,
    "empty": false
  }
}
```

### 2. Chi tiết dịch vụ

Endpoint: `GET /services/{id}`
Mô tả: Lấy thông tin chi tiết dịch vụ.

Response:
```json
{
  "status": "success",
  "message": "Service retrieved successfully",
  "data": {
    "id": "service-id-1",
    "name": "Facial Treatment",
    "description": "Rejuvenating facial treatment",
    "price": 99.99,
    "duration": 60,
    "category": {
      "id": "category-id-1",
      "name": "Facial"
    },
    "imageUrl": "https://example.com/images/facial.jpg",
    "suitableForSkinType": "ALL",
    "specialists": [
      {
        "id": "specialist-id-1",
        "name": "Jane Smith"
      },
      {
        "id": "specialist-id-2",
        "name": "John Johnson"
      }
    ]
  }
}
```

### 3. Tạo dịch vụ mới

Endpoint: `POST /services`
Mô tả: Tạo dịch vụ mới.

Request:
```json
{
  "name": "New Service",
  "description": "Description for new service",
  "price": 129.99,
  "duration": 90,
  "categoryId": "category-id-1",
  "imageUrl": "https://example.com/images/new-service.jpg",
  "suitableForSkinType": "DRY"
}
```

Response:
```json
{
  "status": "success",
  "message": "Service created successfully",
  "data": {
    "id": "new-service-id",
    "name": "New Service",
    "description": "Description for new service",
    "price": 129.99,
    "duration": 90,
    "category": {
      "id": "category-id-1",
      "name": "Facial"
    },
    "imageUrl": "https://example.com/images/new-service.jpg",
    "suitableForSkinType": "DRY"
  }
}
```

### 4. Cập nhật dịch vụ

Endpoint: `PUT /services/{id}`
Mô tả: Cập nhật dịch vụ.

Request:
```json
{
  "name": "Updated Service",
  "description": "Updated description",
  "price": 149.99,
  "duration": 100,
  "categoryId": "category-id-1",
  "imageUrl": "https://example.com/images/updated-service.jpg",
  "suitableForSkinType": "OILY"
}
```

Response:
```json
{
  "status": "success",
  "message": "Service updated successfully",
  "data": {
    "id": "service-id-1",
    "name": "Updated Service",
    "description": "Updated description",
    "price": 149.99,
    "duration": 100,
    "category": {
      "id": "category-id-1",
      "name": "Facial"
    },
    "imageUrl": "https://example.com/images/updated-service.jpg",
    "suitableForSkinType": "OILY"
  }
}
```

### 5. Xóa dịch vụ

Endpoint: `DELETE /services/{id}`
Mô tả: Xóa dịch vụ.

Response:
```json
{
  "status": "success",
  "message": "Service deleted successfully",
  "data": null
}
```

---

## QUẢN LÝ ĐẶT LỊCH

### 1. Danh sách đặt lịch

Endpoint: `GET /bookings`
Mô tả: Lấy danh sách tất cả đặt lịch.

Response:
```json
{
  "status": "success",
  "message": "Bookings retrieved successfully",
  "data": [
    {
      "id": "booking-id-1",
      "customer": {
        "id": "customer-id-1",
        "name": "Jane Doe",
        "email": "jane@example.com",
        "phone": "+1234567890"
      },
      "specialist": {
        "id": "specialist-id-1",
        "name": "John Smith"
      },
      "status": "CONFIRMED",
      "date": "2024-04-15",
      "startTime": "10:00:00",
      "endTime": "12:00:00",
      "services": [
        {
          "id": "service-id-1",
          "name": "Facial Treatment",
          "price": 99.99,
          "duration": 60
        },
        {
          "id": "service-id-3",
          "name": "Manicure",
          "price": 49.99,
          "duration": 45
        }
      ],
      "totalPrice": 149.98,
      "createdAt": "2024-03-10T14:30:00Z"
    },
    {
      "id": "booking-id-2",
      "customer": {
        "id": "customer-id-2",
        "name": "Bob Johnson",
        "email": "bob@example.com",
        "phone": "+1987654321"
      },
      "specialist": {
        "id": "specialist-id-2",
        "name": "Mary Wilson"
      },
      "status": "PENDING",
      "date": "2024-04-20",
      "startTime": "14:00:00",
      "endTime": "16:30:00",
      "services": [
        {
          "id": "service-id-2",
          "name": "Hair Coloring",
          "price": 149.99,
          "duration": 120
        }
      ],
      "totalPrice": 149.99,
      "createdAt": "2024-03-15T09:45:00Z"
    }
  ]
}
```

### 2. Xác nhận đặt lịch

Endpoint: `PATCH /bookings/{id}/confirm`
Mô tả: Xác nhận đặt lịch.

Response:
```json
{
  "status": "success",
  "message": "Booking confirmed successfully",
  "data": {
    "id": "booking-id-2",
    "status": "CONFIRMED",
    "updatedAt": "2024-03-21T18:30:00Z"
  }
}
```

### 3. Hủy đặt lịch

Endpoint: `PATCH /bookings/{id}/cancel`
Mô tả: Hủy đặt lịch.

Request:
```json
{
  "cancellationReason": "Customer requested cancellation"
}
```

Response:
```json
{
  "status": "success",
  "message": "Booking cancelled successfully",
  "data": {
    "id": "booking-id-1",
    "status": "CANCELLED",
    "cancellationReason": "Customer requested cancellation",
    "updatedAt": "2024-03-21T18:45:00Z"
  }
}
```

---

## HƯỚNG DẪN THIẾT KẾ GIAO DIỆN CMS ADMIN

### 1. Cấu trúc trang Admin

Thiết kế layout chung nên có:
- Sidebar (menu điều hướng)
- Header (thông tin người dùng đang đăng nhập, chức năng logout)
- Main content area (nội dung chính thay đổi theo route)

### 2. Các trang chính

#### 2.1. Dashboard
- Tổng quan về số liệu: số lượng người dùng, đặt lịch, bài viết
- Biểu đồ doanh thu theo thời gian
- Danh sách đặt lịch gần đây

#### 2.2. Quản lý Người dùng
- Bảng hiển thị danh sách người dùng với phân trang
- Chức năng tạo, sửa, xóa người dùng
- Filter & search người dùng

#### 2.3. Quản lý Blog
- Hiển thị danh sách bài viết dạng bảng hoặc card
- Editor để tạo/sửa bài viết (nên sử dụng rich text editor)
- Quản lý danh mục blog
- Chức năng xuất bản/bỏ xuất bản

#### 2.4. Quản lý Dịch vụ
- Hiển thị danh sách dịch vụ theo danh mục
- Form tạo/sửa dịch vụ với upload ảnh
- Quản lý danh mục dịch vụ
- Liên kết dịch vụ với chuyên gia

#### 2.5. Quản lý Đặt lịch
- Xem lịch đặt theo dạng lịch (calendar view)
- Xác nhận/hủy đặt lịch
- Tạo đặt lịch mới cho khách hàng

### 3. Luồng xử lý chính

#### 3.1. Đăng nhập
1. Người dùng nhập email/password
2. Gọi API login để lấy token
3. Lưu token vào localStorage/sessionStorage
4. Chuyển hướng đến Dashboard

#### 3.2. Quản lý Blog
1. Hiển thị danh sách bài viết (GET /blogs)
2. Tạo bài viết mới:
   - Hiển thị form với rich text editor
   - Upload ảnh
   - Chọn danh mục
   - Submit form (POST /blogs)
3. Xuất bản bài viết:
   - Click nút "Xuất bản" (PATCH /blogs/{id}/publish)

#### 3.3. Quản lý Đặt lịch
1. Hiển thị danh sách đặt lịch (GET /bookings)
2. Xác nhận đặt lịch: 
   - Click nút "Xác nhận" (PATCH /bookings/{id}/confirm)
3. Hủy đặt lịch:
   - Click nút "Hủy"
   - Nhập lý do hủy
   - Submit form (PATCH /bookings/{id}/cancel)

### 4. Mẹo và Thực tiễn

1. **Xử lý lỗi**: Luôn xử lý lỗi API và hiển thị thông báo rõ ràng
2. **Validation**: Thực hiện validation ở phía client trước khi gửi request
3. **Loading state**: Hiển thị trạng thái loading khi chờ API
4. **Token refresh**: Cài đặt logic refresh token khi token hết hạn
5. **Responsive design**: Thiết kế giao diện responsive cho cả desktop và tablet
6. **Phân quyền**: Kiểm tra quyền người dùng và chỉ hiển thị các tính năng phù hợp

### 5. State Management

Sử dụng state management library (như Redux, Zustand, hoặc Context API) để quản lý:
- Thông tin người dùng đăng nhập
- Trạng thái authentication
- Dữ liệu chung giữa các component

---

## KẾT LUẬN

Tài liệu này cung cấp hướng dẫn cơ bản về cách sử dụng các API endpoint cho CMS Admin của Beautiful Care. Tham khảo API documentation đầy đủ để biết thêm chi tiết về các parameters, error responses và chức năng bổ sung.

Liên hệ dev team tại: dev@beautifulcare.com nếu bạn có thắc mắc hoặc gặp vấn đề khi tích hợp API.

---

**Version**: 1.0.0
**Last Updated**: 2025-03-21 