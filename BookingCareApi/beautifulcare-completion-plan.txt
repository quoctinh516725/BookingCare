# Kế hoạch hoàn thiện dự án BeautifulCare API

## 1. Phân tích hiện trạng
### 1.1. Các thành phần đã có
- DTOs cho Service và ServiceCategory
- Repository interfaces cho Service và ServiceCategory
- Service interfaces cho Service và ServiceCategory
- Mapper interfaces cho Service và ServiceCategory
- Exception handling (ErrorCode, AppException, GlobalExceptionHandler)

### 1.2. Các vấn đề cần giải quyết
- Lỗi MapStruct trong ServiceMapper: "Several possible source properties for target property"
- Cần bổ sung các Entity classes
- Cần bổ sung các Controller classes
- Cần bổ sung các implementation của Service
- Cần tạo các config classes cho Spring Security, MapStruct, Swagger, v.v.
- Cần kiểm tra các relationships giữa các entity
- Hoàn thiện các thành phần còn thiếu (Payment, User, Booking, Specialist, Treatment, SkinTest, Blog)

## 2. Kế hoạch chi tiết

### 2.1. Sửa lỗi MapStruct
- Cập nhật lại ServiceMapper với các mapping rõ ràng cho "name", "description" và các trường khác
- Tạo cấu hình MapStruct trong project để đảm bảo component-model phù hợp
- Thêm MapperConfig để hỗ trợ mapping giữa các loại đặc biệt (ví dụ: UUID, LocalDateTime)

### 2.2. Hoàn thiện các Entity

#### 2.2.1. Service Entity
- Kiểm tra và cập nhật Service Entity với đầy đủ các trường
- Thêm các annotations JPA cần thiết (@Entity, @Table, @Id, @GeneratedValue)
- Thêm relationship với ServiceCategory (ManyToOne)
- Thêm relationship với các entity khác (nếu cần)

#### 2.2.2. ServiceCategory Entity
- Kiểm tra và cập nhật ServiceCategory Entity
- Thêm relationship với Service (OneToMany)
- Thêm các annotations cần thiết

#### 2.2.3. Các Entity khác cần hoàn thiện
- User Entity: Thông tin người dùng (admin, khách hàng, chuyên viên)
- Booking Entity: Thông tin đặt lịch
- Specialist Entity: Thông tin chuyên viên
- Treatment Entity: Thông tin điều trị
- SkinTest Entity: Thông tin test da
- Blog Entity: Thông tin bài viết
- BlogCategory Entity: Thông tin danh mục bài viết
- Payment Entity: Thông tin thanh toán

### 2.3. Hoàn thiện các Repository

- Kiểm tra và cập nhật các Repository interface đã có
- Tạo thêm các Repository interface cho các Entity mới
- Thêm các method tìm kiếm đặc biệt (nếu cần)

### 2.4. Hoàn thiện các Mapper

- Sửa lỗi mapping trong ServiceMapper
- Hoàn thiện các Mapper khác
- Thêm @Component annotation để Spring có thể inject
- Cấu hình MapStruct để tự động tạo implementation

### 2.5. Hoàn thiện các Service

- Kiểm tra và cập nhật các Service interface đã có
- Tạo các Service implementation cho các Service interface
- Đảm bảo xử lý exception đúng cách với AppException và ErrorCode
- Thêm validation và business logic
- Thêm transaction management
- Thêm logging

### 2.6. Tạo các Controller

#### 2.6.1. ServiceController
- Tạo REST controller cho Service
- Thêm các endpoint: GET, POST, PUT, DELETE
- Thêm validation
- Thêm pagination cho các endpoint list
- Thêm tìm kiếm và lọc

#### 2.6.2. ServiceCategoryController
- Tạo REST controller cho ServiceCategory
- Thêm các endpoint cần thiết
- Thêm validation

#### 2.6.3. Các Controller khác
- UserController
- BookingController
- SpecialistController
- TreatmentController
- SkinTestController
- BlogController
- BlogCategoryController
- PaymentController

### 2.7. Cấu hình Spring Security
- Tạo SecurityConfig class
- Cấu hình JWT authentication
- Cấu hình role-based access control
- Tạo các filter cần thiết
- Tạo các utility classes cho JWT

### 2.8. Cấu hình Swagger/OpenAPI
- Thêm thư viện Springdoc-OpenAPI
- Cấu hình Swagger UI
- Tạo API documentation
- Thêm mô tả cho các endpoint

### 2.9. Cấu hình Validation
- Thêm custom validators nếu cần
- Cấu hình validation messages

### 2.10. Database Migration
- Kiểm tra schema.sql và data.sql
- Cấu hình Flyway hoặc Liquibase cho database migration (nếu cần)

### 2.11. Logging và Error Handling
- Cấu hình logging
- Hoàn thiện error handling
- Custom error messages

### 2.12. Testing
- Tạo Unit tests cho các Service
- Tạo Integration tests cho các Repository và Controller
- Tạo E2E tests

## 3. Ưu tiên thực hiện

### 3.1. Ưu tiên cao
1. Sửa lỗi MapStruct
2. Hoàn thiện các Entity
3. Hoàn thiện các Repository
4. Hoàn thiện các Service implementation
5. Cấu hình Spring Security

### 3.2. Ưu tiên trung bình
1. Tạo các Controller
2. Cấu hình Swagger/OpenAPI
3. Database Migration
4. Logging và Error Handling

### 3.3. Ưu tiên thấp
1. Testing
2. Documentation
3. Performance optimization

## 4. Lộ trình thực hiện

### Giai đoạn 1: Cơ sở hạ tầng và sửa lỗi (1-2 ngày)
- Sửa lỗi MapStruct
- Hoàn thiện các Entity
- Hoàn thiện các Repository
- Cấu hình cơ bản (application.yaml)

### Giai đoạn 2: Business Logic (2-3 ngày)
- Hoàn thiện các Service implementation
- Cấu hình Validation
- Cấu hình Error Handling
- Tạo các Controller

### Giai đoạn 3: Security và Documentation (1-2 ngày)
- Cấu hình Spring Security
- Cấu hình Swagger/OpenAPI
- Tạo API Documentation

### Giai đoạn 4: Testing và Hoàn thiện (2-3 ngày)
- Tạo các Unit tests
- Tạo các Integration tests
- Tối ưu hóa performance
- Refactoring code

## 5. Công cụ và thư viện cần thiết
- SpringBoot 3.x
- Spring Data JPA
- Spring Security
- Spring Validation
- MapStruct
- Lombok
- Springdoc-OpenAPI
- JWT
- H2/MySQL/PostgreSQL
- JUnit 5
- Mockito
- AssertJ

## 6. Các nhiệm vụ cụ thể
### 6.1. Sửa lỗi MapStruct
- [ ] Thêm cấu hình MapStruct trong pom.xml/build.gradle
- [ ] Sửa lỗi "Several possible source properties" trong ServiceMapper
- [ ] Tạo MapperConfig class

### 6.2. Hoàn thiện Entity
- [ ] Kiểm tra và cập nhật Service Entity
- [ ] Kiểm tra và cập nhật ServiceCategory Entity
- [ ] Tạo các Entity còn thiếu

### 6.3. Hoàn thiện Repository
- [ ] Kiểm tra và cập nhật ServiceRepository
- [ ] Kiểm tra và cập nhật ServiceCategoryRepository
- [ ] Tạo các Repository còn thiếu

### 6.4. Hoàn thiện Service
- [ ] Hoàn thiện ServiceServiceImpl
- [ ] Hoàn thiện ServiceCategoryServiceImpl
- [ ] Tạo các Service còn thiếu

### 6.5. Tạo Controller
- [ ] Tạo ServiceController
- [ ] Tạo ServiceCategoryController
- [ ] Tạo các Controller còn thiếu

### 6.6. Spring Security
- [ ] Tạo SecurityConfig
- [ ] Tạo JwtUtil
- [ ] Tạo các Filter

### 6.7. Swagger/OpenAPI
- [ ] Cấu hình Swagger
- [ ] Thêm mô tả API

### 6.8. Testing
- [ ] Tạo Unit tests cho Service
- [ ] Tạo Integration tests cho Repository
- [ ] Tạo Integration tests cho Controller 