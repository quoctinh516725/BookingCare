# Fix Plan for User Controller Issues

## Problem Identified
When creating a new user via the `/api/v1/users` endpoint, we're getting the error: "Column 'role' cannot be null". 

## Root Cause Analysis
1. The `User` entity has a required `role` field (defined as NOT NULL in the database)
2. The `UserCreateRequest` DTO doesn't include a role field
3. The Mapstruct mapper (`UserMapper`) doesn't set a default role when mapping from `UserCreateRequest` to `User`
4. In `UserService.createUser()`, the role is never set before saving the user

## Solution Steps

1. **Update the UserCreateRequest DTO**:
   - Add a role field that accepts a UserRole enum value
   - Make it required with @NotNull annotation

2. **Alternative Solution**:
   - If we don't want to expose role selection to all API users, we can modify the UserService to:
     - Set a default role (e.g., CUSTOMER) for all new users created via this endpoint
     - Add a separate admin-only endpoint for creating users with specific roles

3. **Implementation Plan**: 
   - Update UserCreateRequest to add the role field OR
   - Modify UserService.createUser() to set a default role (CUSTOMER)
   - Test user creation to ensure it works correctly

4. **Recommendation**:
   - For security reasons, it's better to set a default role in the service rather than allowing the client to specify any role
   - Create separate admin-only endpoints for creating users with elevated privileges

## Implementation Details

### Option 1: Add role to UserCreateRequest
```java
@NotNull(message = "Role is required")
private UserRole role;
```

### Option 2 (Preferred): Set default role in UserService
```java
@Transactional
public UserResponse createUser(UserCreateRequest request) {
    // existing validation code...
    
    User newUser = userMapper.toUser(request);
    newUser.setPassword(passwordEncoder.encode(request.getPassword()));
    newUser.setActive(true);
    newUser.setRole(UserRole.CUSTOMER); // Set default role
    
    User savedUser = userRepository.save(newUser);
    return userMapper.toUserResponse(savedUser);
}
``` 